"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jwt = require("jsonwebtoken");
var jwkToPem = require("jwk-to-pem");
var Axios = require("axios");
var CognitoJwtVerifier = /** @class */ (function () {
    function CognitoJwtVerifier() {
    }
    CognitoJwtVerifier.prototype.getPublicKey = function (cognitoIssuer) {
        return __awaiter(this, void 0, void 0, function () {
            var url, publicKeys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = cognitoIssuer + "/.well-known/jwks.json";
                        return [4 /*yield*/, Axios.default.get(url)];
                    case 1:
                        publicKeys = _a.sent();
                        return [2 /*return*/, publicKeys.data.keys.reduce(function (agg, current) {
                                var pem = jwkToPem(current);
                                agg[current.kid] = { instance: current, pem: pem };
                                return agg;
                            })];
                }
            });
        });
    };
    CognitoJwtVerifier.prototype.checkJwt = function (tokenData, region, userPoolId) {
        return __awaiter(this, void 0, void 0, function () {
            var payloadResult, token, decodedJwt, cognitoIssuer, publicKey, pem, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        token = tokenData;
                        decodedJwt = jwt.decode(token, { complete: true });
                        // Fail if the token is not jwt
                        if (!decodedJwt) {
                            return [2 /*return*/, JSON.stringify({
                                    status: false,
                                    code: 401,
                                    message: "Not a valid JWT Token: " + token,
                                })];
                        }
                        cognitoIssuer = "https://cognito-idp." + region + ".amazonaws.com/" + userPoolId;
                        return [4 /*yield*/, this.getPublicKey(cognitoIssuer)];
                    case 1:
                        publicKey = _a.sent();
                        pem = publicKey[decodedJwt["header"]["kid"]].pem;
                        if (!pem) {
                            return [2 /*return*/, JSON.stringify({
                                    status: false,
                                    code: 401,
                                    message: "Invalid kid: " + decodedJwt["header"]["kid"],
                                })];
                        }
                        return [4 /*yield*/, jwt.verify(token, pem, { issuer: cognitoIssuer }, function (err, payload) {
                                if (err) {
                                    payloadResult = JSON.stringify({
                                        status: false,
                                        code: 401,
                                        message: err.name,
                                    });
                                }
                                else {
                                    payloadResult = JSON.stringify({
                                        status: true,
                                        code: 200,
                                        message: "Congrats! Your token is valid",
                                        data: payload,
                                    });
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        //If token is not valid, respond with 401 (unauthorized)
                        console.log("Error : ", error_1);
                        payloadResult = JSON.stringify({
                            status: false,
                            code: 401,
                            message: error_1,
                        });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, payloadResult];
                }
            });
        });
    };
    return CognitoJwtVerifier;
}());
exports.CognitoJwtVerifier = CognitoJwtVerifier;
//# sourceMappingURL=cognito-jwt-verifier.js.map